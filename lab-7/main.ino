#include <EEPROM.h>
#include <Wire.h>
#include <LedControl.h>

//Switch
#define SW1 2
#define SW2 3
bool lastInput1;
bool lastInput2;
bool currentInput1;
bool currentInput2;

//DOT MATRIX
byte device = 4;
LedControl lc = LedControl(4,5,6,device);	//DIN, CLK, CS, count of displays

//RTC
#define DS3231_I2C_ADDRESS 0x68 //address DS3231 
byte second,minute,hour,dayOfWeek,dayOfMonth,month,year;

//SYSTEM STATE
byte System_State;

//Timming
unsigned long currentTime;
unsigned long ScreenTime;

byte lighting = 0;
bool showDots;

byte ASCII[95][8] = {
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // (space)
{ 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 },   // (!)
{ 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // (")
{ 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00 },   // (#)
{ 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00 },   // ($)
{ 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00 },   // (%)
{ 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00 },   // (&)
{ 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },   // (')
{ 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00 },   // (()
{ 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00 },   // ())
{ 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 },   // (*)
{ 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00 },   // (+)
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06 },   // (,)
{ 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 },   // (-)
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 },   // (.)
{ 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 },   // (/)
{ 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 },   // (0)
{ 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 },   // (1)
{ 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 },   // (2)
{ 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 },   // (3)
{ 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 },   // (4)
{ 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 },   // (5)
{ 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 },   // (6)
{ 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 },   // (7)
{ 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 },   // (8)
{ 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 },   // (9)
{ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00 },   // (:)
{ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06 },   // (//)
{ 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00 },   // (<)
{ 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00 },   // (=)
{ 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00 },   // (>)
{ 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00 },   // (?)
{ 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00 },   // (@)
{ 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 },   // (A)
{ 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 },   // (B)
{ 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 },   // (C)
{ 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 },   // (D)
{ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 },   // (E)
{ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 },   // (F)
{ 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 },   // (G)
{ 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 },   // (H)
{ 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 },   // (I)
{ 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 },   // (J)
{ 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 },   // (K)
{ 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 },   // (L)
{ 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 },   // (M)
{ 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 },   // (N)
{ 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 },   // (O)
{ 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 },   // (P)
{ 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 },   // (Q)
{ 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 },   // (R)
{ 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 },   // (S)
{ 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 },   // (T)
{ 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 },   // (U)
{ 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 },   // (V)
{ 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 },   // (W)
{ 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 },   // (X)
{ 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 },   // (Y)
{ 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 },   // (Z)
{ 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00 },   // ([)
{ 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00 },   // (\)
{ 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00 },   // (])
{ 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 },   // (^)
{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF },   // (_)
{ 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },   // (`)
{ 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00 },   // (a)
{ 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00 },   // (b)
{ 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00 },   // (c)
{ 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00 },   // (d)
{ 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00 },   // (e)
{ 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00 },   // (f)
{ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F },   // (g)
{ 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00 },   // (h)
{ 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 },   // (i)
{ 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E },   // (j)
{ 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00 },   // (k)
{ 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 },   // (l)
{ 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00 },   // (m)
{ 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00 },   // (n)
{ 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00 },   // (o)
{ 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F },   // (p)
{ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78 },   // (q)
{ 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00 },   // (r)
{ 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00 },   // (s)
{ 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00 },   // (t)
{ 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00 },   // (u)
{ 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 },   // (v)
{ 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00 },   // (w)
{ 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00 },   // (x)
{ 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F },   // (y)
{ 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00 },   // (z)
{ 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00 },   // ({)
{ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 },   // (|)
{ 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00 },   // (})
{ 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // (~)
};

void Clock() {
  Draw(3, 35, 0);  //C
  Draw(2, 44, 0);  //L
  Draw(1, 47, 0);  //O
  Draw(0, 43, 0);  //K
  delay(2000);
}

void WriteTime() {
  if (System_State == 0 || System_State == 2){
   uint8_t hour12 = hour%12 == 0? 12 : hour%12;
    Draw(2, (hour12 % 10) + 16, 0);
    Draw(3, (hour12 / 10) + 16, 0);
  }

  if (System_State == 0 || System_State == 3){
    Draw(0, (minute % 10) + 16, 1);
    Draw(1, (minute / 10) + 16, 1);
  }
  
  //กระพริบ dot บนหน้าจอ
  lc.setLed(2, 1, 7, showDots);  //addr, row, column
  lc.setLed(2, 2, 7, showDots);
  lc.setLed(2, 5, 7, showDots);
  lc.setLed(2, 6, 7, showDots);
  showDots = !showDots;
}

void Draw(byte adr, byte symbol, byte offset) {
  for (int i = 0; i <= 7; i++) {
    byte dataRow = ASCII[symbol][i];
    dataRow = Revers(dataRow) >> offset;
    lc.setRow(adr, i, dataRow);
  }
}

byte Revers(byte in) {
  //กลับด้านตัวอักษร
  byte out;
  out = 0;
  if (in & 0x01) out |= 0x80;
  if (in & 0x02) out |= 0x40;
  if (in & 0x04) out |= 0x20;
  if (in & 0x08) out |= 0x10;
  if (in & 0x10) out |= 0x08;
  if (in & 0x20) out |= 0x04;
  if (in & 0x40) out |= 0x02;
  if (in & 0x80) out |= 0x01;
  return(out);
}

byte decToBcd(byte val) {
  return((val / 10 * 16) + (val % 10));
}

byte bcdToDec(byte val) {
  return((val / 16 * 10) + (val % 16));
}

void SetRtc(byte second, byte minute, byte hour, byte dayOfWeek, byte dayOfMonth, byte month, byte year) {
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0); //set 0
  Wire.write(decToBcd(second)); //set sec
  Wire.write(decToBcd(minute)); //set min
  Wire.write(decToBcd(hour)); //set hours
  Wire.write(decToBcd(dayOfWeek)); //set day of week
  Wire.write(decToBcd(dayOfMonth)); //set day of month
  Wire.write(decToBcd(month)); //set month
  Wire.write(decToBcd(year)); //set year
  Wire.endTransmission();
}

void GetRtc() {
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0);
  Wire.endTransmission();
  Wire.requestFrom(DS3231_I2C_ADDRESS, 7);
  second = bcdToDec(Wire.read() & 0x7f);
  minute = bcdToDec(Wire.read());
  hour = bcdToDec(Wire.read() & 0x3f);
  dayOfWeek = bcdToDec(Wire.read());
  dayOfMonth = bcdToDec(Wire.read());
  month = bcdToDec(Wire.read());
  year = bcdToDec(Wire.read());
}

void setup() {
	Wire.begin();
	Serial.begin(9600);
	pinMode(SW1, INPUT_PULLUP);
	pinMode(SW2, INPUT_PULLUP);

	lighting = EEPROM.read(0);	//load lighting(EEPROM)
	delay(10);

  //set display
	for (byte address = 0; address<device; address++) {
		lc.shutdown(address, false);
		lc.setIntensity(address, lighting);	//set lighing 0 - 15
		lc.clearDisplay(address);		//clear display
	}
  Clock();
}

void loop() {
	currentInput1 = digitalRead(SW1); 
	currentInput2 = digitalRead(SW2);
  
	switch (System_State){
	case 0:
		//แสดงเวลาจริง
		currentTime = millis();

		if (currentTime - ScreenTime >= 500) {
			ScreenTime = currentTime;
			GetRtc();		//อ่านค่าเวลาจริง
			WriteTime();	//เขียนเวลาจากที่อ่านลงบนหน้าจอ
		}

		if (!currentInput1 && !currentInput2) {
		  delay(20);
			System_State = 1;
		}
		break;

	case 1:
		if (currentInput1 && currentInput2) {
    delay(20);
			System_State = 2; //เปิดเมนู
			
			Draw(1, 0, 0);	//space
			Draw(0, 40, 0);	//H
		}
		break;

	case 2:
		//เมนูที่ 1 กำหนดชั่วโมง(H)
		WriteTime();

		if (currentInput1 != lastInput1) {
			//กด SW1
      delay(20);
			if (currentInput1) {
        delay(20);
				System_State = 3;
				Draw(3, 45, 0);	//M
				Draw(2, 0, 0);	//space
			}
		}

		if (currentInput2 != lastInput2) {
			//กด SW2
      delay(20);
			if (currentInput2) {
				hour++;
				if (hour > 23) {
					hour = 0;
				}
			}
		}
		break;

	case 3:
		//เมนูที่ 2 กำหนดนาที(M)
		WriteTime();

		if (currentInput1 != lastInput1) {
      delay(20);
			//กด SW1
			if (currentInput1) {
				System_State = 4;
        Draw(3, 44, 0); //L
				Draw(2, 0, 0);	//space
				Draw(0, (lighting % 10) + 16, 1);
				Draw(1, (lighting / 10) + 16, 1);
			}
		}

		if (currentInput2 != lastInput2) {
      delay(20);
			//กด SW2
			if (currentInput2) {
				minute++;
				if (minute > 59) {
					minute = 0;
				}
			}
		}
		break;

	case 4:
		//เมนูที่ 3 กำหนดระดับความสว่าง(L)
   
		if (currentInput1 != lastInput1) {
			//กด SW1
      delay(20);
			if (currentInput1) {
				System_State = 5;
				Draw(3, 83, 0);	//S
				Draw(2, 84, 0);	//t
				Draw(1, 82, 0);	//r
				Draw(0, 84, 0);	//t
			}
		}

		if (currentInput2 != lastInput2) {
			//กด SW2
      delay(20);
			if (currentInput2) 
			{
				lighting++;
				if (lighting > 15) 
				{
					lighting = 0;			
				}
				Draw(0, (lighting % 10) + 16, 1);
				Draw(1, (lighting / 10) + 16, 1);

				for (byte address = 0; address<device; address++) 
				{
					lc.setIntensity(address, lighting);	//set lighting 0 - 15
				}
			}
		}
		break;

	case 5:
		//เมนูสุดท้าย strt
		if (currentInput1 != lastInput1) {
			//กด SW1
      delay(20);
			if (currentInput1) {
				SetRtc(0, minute, hour, dayOfWeek, dayOfMonth, month, year);
				EEPROM.write(0, lighting);
				System_State = 0;
			}
		}
		break;
	}
	lastInput1 = currentInput1;
	lastInput2 = currentInput2;
}
